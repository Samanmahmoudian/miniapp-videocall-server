https://miniapp-videocall-server.onrender.com


var myPeerConnection = new RTCPeerConnection({
  iceServers: [
      {
        urls: "stun:stun.relay.metered.ca:80",
      },
      {
        urls: "turn:global.relay.metered.ca:80",
        username: "a4f5d501c33dfea6e2836653",
        credential: "sxmhLRRVlHNc7aUL",
      },
      {
        urls: "turn:global.relay.metered.ca:80?transport=tcp",
        username: "a4f5d501c33dfea6e2836653",
        credential: "sxmhLRRVlHNc7aUL",
      },
      {
        urls: "turn:global.relay.metered.ca:443",
        username: "a4f5d501c33dfea6e2836653",
        credential: "sxmhLRRVlHNc7aUL",
      },
      {
        urls: "turns:global.relay.metered.ca:443?transport=tcp",
        username: "a4f5d501c33dfea6e2836653",
        credential: "sxmhLRRVlHNc7aUL",
      },
  ],
});
       
    {
       urls: "turn:2.176.229.75:3478",
       username: "samanmahmoudian",
       credential: "Saman1384",
     },

my ip = 2.176.229.75




    // ✅ ایجاد DataChannel برای ارسال پیام 'ready'
    const dataChannel = peerConnection.createDataChannel("chat");
    dataChannel.onopen = () => {
        console.log("✅ DataChannel باز شد!");
        dataChannel.send("ready"); // 🔹 فرستادن پیام 'ready'
    };
    
    dataChannel.onmessage = (event) => {
        console.log("📩 پیام دریافت شد:", event.data);
    };

    


         peerConnection.ondatachannel = (event) => {
            const dataChannel = event.channel;
            dataChannel.onmessage = (event) => {
                console.log("📩 پیام دریافت شد:", event.data); // 🔹 لاگ پیام 'ready'
            };
        };

















              if(queue.length == 0){
        if(this.clients.has(TelegramId)){
          queue.push(TelegramId)
          console.log(queue)
        }
      }else if(queue.length == 1){
          const caller = await this.clients.get(TelegramId)
          const callee = await this.clients.get(queue[0])
          console.log(queue)
          if(callee && caller){
            caller.emit('caller' , queue[0])
            callee.emit('callee' , TelegramId)
            queue.splice(0 , 1)
            if(this.clients.has(TelegramId)){
              this.startNewCall(TelegramId)
            }
          }else{
            if(this.clients.has(TelegramId)){
              this.startNewCall(TelegramId)
            }
          }
      
      }else if(queue.length > 1){
        const caller = await this.clients.get(queue[0])
        const callee = await this.clients.get(queue[1])
        if(caller && callee){
          await caller.emit('caller' , queue[1])
          await callee.emit('callee' , queue[0])
          queue.splice(0 , 2)
          this.startNewCall(TelegramId)
        }else{
          this.startNewCall(TelegramId) 
        }

    }